//in case you want to break a fd and then transfer the amount to a particular account
#include <stdio.h>
#include <string.h>
#include <libpq-fe.h>
#include <math.h>
#include<time.h>
#include<stdlib.h>




int main()
{

    EXEC SQL BEGIN DECLARE SECTION;

        char IFDID[22] ,Idate[15], FDID[20], DATE[25],MDATE[25], ifsc[15],*timestamp;
	int t,r;
	long int princi, acc ,bal,nbal;
        char query[500] ,buf[200];
	double ret;

   EXEC SQL END DECLARE SECTION;
printf("enter your fdid and date of breaking:");
scanf("%s%s",&IFDID,&Idate);


    strcpy(query," SELECT Fixed_Deposit.Deposit_Amount,Fixed_Deposit.Interest_Rate, Account.Account_No, Account.Balance, Account.IFSC_Code ,Fixed_Deposit.Mature_Date,(DATE_PART('year',");
    sprintf(buf,"%s",Idate);
	strcat(query,buf);
 strcat(query,"::date) - DATE_PART('year', Fixed_Deposit.Creation_Date::date)) from Fixed_Deposit Fixed_Deposit JOIN account ON(Fixed_Deposit.CIF_No = Account.CIF_No) where Fixed_Deposit.FD_ID =");
     sprintf(buf,"%s",IFDID);
    strcat(query,buf);

    printf("%s\n",query);
    EXEC SQL CONNECT TO "201551095@10.100.1.62" USER "201551095" IDENTIFIED BY "shefali";

    EXEC SQL set search_path to bank;
    EXEC SQL PREPARE query_prep FROM :query;
    EXEC SQL DECLARE emp_cursor CURSOR FOR query_prep;
    EXEC SQL OPEN emp_cursor;



    while(sqlca.sqlcode==0)
 {
EXEC SQL FETCH FROM emp_cursor INTO :princi,:r,:acc,:bal,:ifsc,:MDATE,:t;

}

/*printf("%s\n",ifsc);
printf("%ld  %ld\n",bal,acc);*/

if(strcmp(MDATE,Idate) > 0 )

{
	double a,b;
	a=1 + (double)r/400;
	b= 4*t;

	 ret = princi * pow(a,b) - princi ;
	printf(" \n\n Return Amount : %lf \n",ret );
}

else
	printf("FD already matured ");


 nbal = (long int)ret + bal ;
printf("new bal: %ld \n ", nbal);

//creating timestamp

 timestamp = (char *)malloc(sizeof(char) * 16);

time_t ltime;
ltime=time( 0);
struct tm *tm;
tm=localtime(&ltime);


sprintf(timestamp,"'%04d-%02d-%02d %02d:%02d:%02d'", tm->tm_year+1900, tm->tm_mon,tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);


//printf("%s\n",timestamp);


EXEC SQL insert into TRANSACTIONS(Account_No,Account_to,Amount,BALANCE,Time_Stamp,DD_No,FD_ID,Cheque_No,Card_No,No_Of_Notes,Loan_Account_No,Installment_No_Loan,POLICY_NO,INSTALLMENT_NO_INSURANCE,IFSC_Code,Narration) values(:acc, 0 ,:ret,:nbal,:timestamp, 0,:IFDID, 0, 0, 0, 0, 0, 0 , 0 ,:ifsc, 'FD' );

if (sqlca.sqlcode < 0) {
printf("\n\nTRANSACTION DID NOT GET ADDED\n");
EXEC SQL rollback work;
return;
}
else
printf("\n TRANSACTION Added Succesfully\n");


EXEC SQL UPDATE Account
    SET Balance = :nbal
    WHERE Account_No= :acc;

if (sqlca.sqlcode < 0)
 {
printf("\n\nbalance  not updated\n");
EXEC SQL rollback work;
return;
}
else
  printf("\n balance updated\n");

EXEC SQL commit;

 return 0;
}


/*
'3475943759834759'
'2016-03-11'
*/
